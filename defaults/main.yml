---
# The comprehensive list of public user key files used to make up the authorized_keys file on the target. The filenames given here will be appended the suffix ".pub".
ssh_authorized_keys: []

# If set to True all keys which aren't listed in `ssh_authorized_keys` are deleted on the next run.
ssh_manage_root_keys_exclusively: True

# Keys are deployed in /etc/ssh/authorized_keys/root/authorized_keys to avoid interference with software that manages ~/.ssh/authorized_keys as well
ssh_deploy_root_keys_in_etc: False

# If set to true, the SSH server on target will allow X11 forwarding.
ssh_allow_x11_fwd: false

# The following variables generally don't need to be changed except when the Ansible repository is re-organized internally. They are the configuration for shell scripts run on the runner for key generation.
# Directory where SSH user keys are stored
ssh_user_key_loc: '{{ config_repo_path }}/ssh-public-keys'

# List of authentication methods which should be allowed
ssh_auth_methods:
  - publickey

ssh_publickey_sssd: False

# Deploy the special recovery key (recovery.pub) to all hosts (useful if the IAM fails)
ssh_deploy_recovery_key: False

# List of ssh packages that should be installed (see vars/ for distribution specific variables).
pkgs: []

# Whether to use only modern ciphers on new clients (might impact connections
# to old servers)
ssh_strict_client: False

# Environment variables to accept over SSH
sshd_acceptable_environment_variables:
  - LANG
  - LC_*

# Environment variables to send over SSH
ssh_environment_variables_to_send:
  - LANG
  - LC_*

# Whether to use DNS to reverse-lookup incoming connections
sshd_use_dns: False

# Kerberos principals to allow to sign in as root. This simply adds them to
# root's .k5login file
sshd_principals_for_root: []

# Whether to restrict ssh login to a specific set of users
sshd_restrict_users: False

# Whether to apply any of the restrictions using this role. Disable this if
# you e.g. use a group from LDAP
sshd_manage_restriction_group: True

# Which users to allow if login is restricted
sshd_allowed_users:
  - root

# If login restrictions are enabled, how shall the group be called?
sshd_restriction_group: sshusers

# Restrict the commands a SSH user can execute, see README
# sshd_restricted_commands:
#   - user: root
#     commands:
#       - "^scp -p( -d)? -t( --)? /srv/reprepro/incoming(/[-a-z0-9+~_.]*[-a-z0-9+~_])?$"
#       - "^chmod 0644( /srv/reprepro/incoming/[-a-z0-9+~_.]*[-a-z0-9+~_])+$"
#       - "^reprepro ( -V)? -b /srv/reprepro processincoming foobar$"

# Whether to allow root login
sshd_permit_root_login: "prohibit-password"

# Besides root, deploy pubkey/krb5login for these users:
sshd_additional_user_cfg: []
#  - name: maxf
#    authorized_keys:
#      - card
#    exclusive: False
#    deploy_in_etc: False
#    key_path: ""
#    k5login:
#      - maxf@EXAMPLE.ORG

# Replace the distribution-provided moduli with custom ones
sshd_replace_moduli: False

# If we're to replace the moduli, how are they named in the current playbook?
sshd_moduli_name: "ssh.moduli"

# Where to listen on. You'll seldom need to change this
sshd_listen_address:
  - '::'
  - 0.0.0.0

# Whether to install mosh
ssh_install_mosh: False
